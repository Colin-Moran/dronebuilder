

###1### Assignment
1. Iterate categories and display each individual category
2. Replace harcoded image and name with data of category
BONUS
1. Create New Component in Components folder named CategoryItem.vue
2. Move category template from PageHome to CategoryItem
3. Iterate CategoryItem and provide to each CategoryItem "category"
   as a prop


###2### Assignment
1. Iterate meetups and display each individual meetup
2. Replace harcoded image, startDate, title, category name, location, description
BONUS
1. Create New Component in Components folder named MeetupItem.vue
2. Move meetup template from PageHome to MeetupItem
3. Iterate MeetupItem and provide to each MeetupItem "meetup"
   as a prop


###3### Assignment
1. In PageMeetupDetail send get request to "/api/v1/meetups/:meetupId"
2. Get meetup from res data and assign meetup to meetup defined in components data()
3. Provide meetup data to PageMeetupDetail


###4### Mini Assignment
1. Fix links in the navbar so name of our application and home link are pointing to our actual home page (:


####5#### Assignment
1. Create new route of path '/find' that should navigate to PageMeetupFind
2. On home page change 'All' and 'Find' link for router-link to navigate to PageMeetupFind

####6#### Assignment
1. Implement routing to PageRegister and PageLogin
2. PageRegister path is "/register"
3. PageLogin path is "/login"
4. Update Links in navbar

####7#### Assignment
1. Bind data from inputs to form object
2. Create "login" function in PageLogin
3. When form is submitted call "login" function and console.log form data

4. Create "register" function in PageRegister
5. When form is submitted call "register" function and console.log form data

BONUS:
1. Create new module called "auth"
2. Register module in store/index.js
3. Create 2 methods, loginWithEmailAndPassword and registerUser
4. dispatch these functions in login and register functions and provide formData inside
5. move console.logs from your login and register to module functions

####8#### Assignment
1. Provide required validators and blur to register form inputs.
2. You don't need provide required to avatar
3. Display also error messages

####9#### Assignment
1. Create login route of path "/login" similiar to register
2. Provide login controller to login route
3. Create simple functionality of login controller
4. Implement simple response and try route in postman,
   don't forget to restart your node server/

####10#### Assignment
1. Finish register user in auth modules
2. send post request to '/api/v1/users/register'
3. after succesful register redirect to login page
4. in case of error just console log error

####11#### Assignment
1. Create "logout" action in auth module
2. send post request to '/api/v1/users/logout'
3. after succesful logout "commit" setAuthUser of null
4. in case of error just console log error

####12#### Assignment
1. Create "meta" property "onlyGuestUser" on PageRegister and PageLogin
   and set it to be true
2. Add "else if" statement after if "to.meta.onlyAuthUser"
3. If user is authenticated navigate to home page
4. If User is not authenticated navigate to requested page

####13#### Assignment
1. Update MeetupConfirmation with real data from our form
Tip: Use props (:
2. Validate inputs in our forms
Tip: Use blur (:

####14#### Assignment
1. Create new action in meetups module called "createMeetup"
2. In "createMeetup" expect to receive your meetup data and console.log them out
3. In "MeetupCreateWizard emit event "meetupConfirmed"" when confirm is pressed
   and send meetup along
4. In "PageMeetupCreate" listen to the event and dispatch "createMeetup" you
   created before. Don't forget to send meetup.


####15#### Assignment
1. Create new action in threads module called "postThread"
2. In "postThread" expect to receive your thread title and meetup Id
3. Send a post request to '/api/v1/threads'
4. Create thread and inspect network tab in browser, make sure you are sending request. It should fail

####16#### Assignment
1. Create "text" variable in data of "PostCreate" and bind it to textarea
2. Create new action in threads module called "sendPost"
3. In "sendPost" action expect to receive your post text and thread Id
NOTE: You need to send thread id as prop to "PostCreate"
4. In "sendPost" action create "post" object containing "text" and "thread"
5. Console log out "post" object
6. Send a post request to '/api/v1/posts', send along "post" object
7. In "PostCreate" component when button "Send" is clicked dispatch action
   "sendPost" , you should get error in network tab but you should see console
   of your post

BONUS: Disable "Send" button when you have empty text in textarea


####17#### Assignment
1. in "sendPost" action chain "then" function to axiosInstance.post

2. Get data from response and assign it to "createdPost" variable

3. dispatch('addPostToThread', {post: createdPost, threadId})

4. Create new action "addPostToThread" where you can expect to get "post"
   and "threadId"

5. in "addPostToThread" find index of thread where you want to push your post
NOTE: You have threadId so you can find thread you are looking for in state.items

6. Check if thread was found (if index > -1) and get all of the posts from
   thread and assign them to variable "posts"
NOTE: If you have index of thread you can get posts from state by doing
      something like this: state.items[threadIndex].posts
7. push your created post to "posts"

8. commit mutation "savePostToThread" , send there your posts and threadId
NOTE: Create mutation "savePostToThread" and expect to get posts and index

9. in "savePostToThread" use Vue.set and set your new posts to thread
E.G: Vue.set(state.items[index], 'posts', posts)

10. back in "sendPost" action return "createdPost" in the end of "then"

NOTE: After post is created we want to add post to a thread, so we need to
 first find thread in items and then push created post to found thread.


####18#### Assignment
1. Create "PageProfile" you can find html and styles in resources of this lecture
2. Create route to this page of path '/me'
3. Allow only authenticated users to see this page
4. Update link in navbar to navigate to profile page if clicked
5. Navigate to this page (:

####19#### Assignment
1. Create new module called "stats"
2. Provide "stats" module to store in store/index.js
3. Specify these data in "stats" module state

   meetups: {
      data: [],
      count: null,
    },
    threads: {
      data: [],
      count: null,
    },
    posts: {
      data: [],
      count: null,
    }

4. create action "fetchUserStats"
5. In "fetchUserStats" send get request to '/api/v1/users/me/activity'
6. Get your response data in "then" and assign them to variable "stats"
7. Create mutation called "setStats"
8. call this mutation and provide "stats" data inside
9. in "setStats" mutation assign "stats" to state
TIP: You can assign it like this: Object.assign(state, {}, stats)
10. Dispatch "fetchUserStats" in PageProfile created lifecycle
11. verify in network tab and in VUEX extension that you are getting these data

####20#### Assignment
1. Get your user, meetups, threads, posts, meetups count, threads count and posts count to PageProfile
2. Follow TODO in template and display all data
3. Don't implement functionaly related to tabs yet

####21#### Assignment
1. create "activeTab" in data() and assign to it string value "meetups"
2. Follow tab TODOS

####22#### Assignment
1. Create new component called "UserUpdateModal"
2. Provide template from resources
3. Use this component instead of button "Update Info"
4. Create functionality to open and close this modal

####23#### Assignment
1. Get authenticated user to UserUpdateModal component and bind it to our inputs
2. Check Modal if user data are displayed in form

PREFERABLE WAY:
1. pass "user" as "authUser" prop to UserUpdateModal from PageProfile
2. in data() destructurize "authUser" and assign it to "user" variable
   so we will create copy of user
3. bind user to inputs

####24#### Assignment
1. When "Save changes" button is clicked call function "emitUser"
2. in "emitUser" emit event 'userSubmitted' with your
   "user" and "done" callback function where you close modal
3. in "PageProfile" when user is submitted dispatch action "auth/updateUser"
4. Create action "updateUser" and expect to receive your user
5. send  "patch" request to "/api/v1/users/:userId" and as
   second value provide your user
6. Get user from response and commit mutation "setAuthUser"
   NOTE: maybe you need to change implementation and assign user to state
         via Vue.set... if changes will be not refreshed in browser
7. return user from "then" function
8. in "PageProfile" display toast message "Profile Successfuly Updated"
   and call "done" callback function to close modal
9. provide also "catch". in case of error console log error and call "done"

####25#### Assignment
1. Create Page "PageMeetupEdit" with html and styles from resources
2. Create route to this page with path of '/meetups/:meetupId/edit'
3. in created lifecycle function console log meetupId from route params

####26#### Assignment
1. Create "updateMeetup" action and expect to get meetupData
2. send "patch" request to "/api/v1/meetups/:meuetpId" and send along meetup data
3. Get meetup from response and commit mutation "mergeMeetup" and send along your updated meetup
4. in "mergeMeetup" assign to state.item your old values from state.item with new ones of your updated meetup
5. return meetup from "then" function
6. in "PageMeetupEdit" change some values and when user click "update" button
   dispatch action to "updateMeetup"
7. display toast message when meetup is succesfuly updated
8. Refresh page to verify changes were applied

NOTE: proccess location










